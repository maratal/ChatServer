<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - ChatServer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: #f5f5f5;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #333;
        }
        
        .login-container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
            border: 1px solid #ddd;
        }
        
        .logo {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .logo h1 {
            font-size: 2rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 5px;
        }
        
        .logo p {
            color: #666;
            font-size: 0.9rem;
        }
        
        .form-group {
            margin-bottom: 20px;
            position: relative;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #333;
            font-size: 0.9rem;
        }
        
        .form-group input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
            background: #f9f9f9;
        }
        
        .form-group input:focus {
            outline: none;
            border-color: #666;
            background: white;
        }
        
        .form-group.error input {
            border-color: #e74c3c;
            background: #fdf2f2;
        }
        
        .error-popup {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: #e74c3c;
            color: white;
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 0.85rem;
            margin-top: 5px;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            z-index: 10;
        }
        
        .error-popup::before {
            content: '';
            position: absolute;
            top: -5px;
            left: 15px;
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-bottom: 5px solid #e74c3c;
        }
        
        .form-group.error .error-popup {
            opacity: 1;
            transform: translateY(0);
        }
        
        .login-button {
            width: 100%;
            padding: 12px;
            background: #333;
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.3s ease;
        }
        
        .login-button:hover {
            background: #555;
        }
        
        .login-button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .login-button.loading {
            background: #999;
            cursor: wait;
        }
        
        .divider {
            text-align: center;
            margin: 30px 0;
            position: relative;
            color: #666;
            font-size: 0.9rem;
        }
        
        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: #ddd;
            z-index: 1;
        }
        
        .divider span {
            background: white;
            padding: 0 15px;
            position: relative;
            z-index: 2;
        }
        
        .register-link {
            text-align: center;
        }
        
        .register-link a {
            color: #333;
            text-decoration: none;
            font-weight: 500;
            border-bottom: 1px solid #ddd;
            transition: border-color 0.3s ease;
        }
        
        .register-link a:hover {
            border-bottom-color: #333;
        }
        
        .status-message {
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 0.9rem;
            text-align: center;
        }
        
        .status-message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status-message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        @media (max-width: 480px) {
            .login-container {
                margin: 20px;
                padding: 30px 25px;
            }
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="logo">
            <h1>ChatServer</h1>
            <p>Sign in to your account</p>
        </div>
        
        <div id="statusMessage" class="status-message" style="display: none;"></div>
        
        <form id="loginForm">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="username" required>
                <div class="error-popup"></div>
            </div>
            
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
                <div class="error-popup"></div>
            </div>
            
            <button type="submit" class="login-button">Sign In</button>
        </form>
        
        <div class="divider">
            <span>or</span>
        </div>
        
        <div class="register-link">
            <a href="/register">Create new account</a>
        </div>
    </div>
    
    <script>
        
        // Generate a unique device ID
        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        // Centralized login function
        async function performLogin(username, password, deviceInfo) {
            // Create Basic Auth header
            const credentials = btoa(`${username}:${password}`);
            
            const response = await fetch('/users/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Basic ${credentials}`
                },
                body: JSON.stringify(deviceInfo)
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Store user data with access token in currentUser
                const currentUserData = {
                    info: data.info,
                    session: data.deviceSessions[0]
                };
                localStorage.setItem('currentUser', JSON.stringify(currentUserData));
                return { success: true, data: currentUserData };
            } else {
                return { success: false, error: data, status: response.status };
            }
        }
        
        // Get device info automatically
        function getDeviceInfo() {
            const userAgent = navigator.userAgent;
            let deviceName = 'Web Browser';
            let deviceModel = 'Unknown';
            
            // Extract browser name
            if (userAgent.includes('Chrome')) {
                deviceName = 'Chrome Browser';
            } else if (userAgent.includes('Firefox')) {
                deviceName = 'Firefox Browser';
            } else if (userAgent.includes('Safari')) {
                deviceName = 'Safari Browser';
            } else if (userAgent.includes('Edge')) {
                deviceName = 'Edge Browser';
            }
            
            // Extract OS info
            if (userAgent.includes('Windows')) {
                deviceModel = 'Windows PC';
            } else if (userAgent.includes('Mac')) {
                deviceModel = 'Mac';
            } else if (userAgent.includes('Linux')) {
                deviceModel = 'Linux PC';
            } else if (userAgent.includes('Android')) {
                deviceModel = 'Android Device';
            } else if (userAgent.includes('iPhone')) {
                deviceModel = 'iPhone';
            } else if (userAgent.includes('iPad')) {
                deviceModel = 'iPad';
            }
            
            return {
                id: generateUUID(),
                name: deviceName,
                model: deviceModel,
                token: null, // No push support for web yet
                transport: 'web'
            };
        }
        
        // Show error for a specific field
        function showFieldError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const formGroup = field.closest('.form-group');
            const errorPopup = formGroup.querySelector('.error-popup');
            
            formGroup.classList.add('error');
            errorPopup.textContent = message;
            
            // Auto-hide error after 5 seconds
            setTimeout(() => {
                hideFieldError(fieldId);
            }, 5000);
        }
        
        // Hide error for a specific field
        function hideFieldError(fieldId) {
            const field = document.getElementById(fieldId);
            const formGroup = field.closest('.form-group');
            formGroup.classList.remove('error');
        }
        
        // Show status message
        function showStatus(message, type) {
            const statusEl = document.getElementById('statusMessage');
            statusEl.textContent = message;
            statusEl.className = `status-message ${type}`;
            statusEl.style.display = 'block';
            
            if (type === 'success') {
                setTimeout(() => {
                    statusEl.style.display = 'none';
                }, 3000);
            }
        }
        
        // Handle form submission
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Clear previous errors
            document.querySelectorAll('.form-group.error').forEach(group => {
                group.classList.remove('error');
            });
            
            const button = document.querySelector('.login-button');
            button.classList.add('loading');
            button.textContent = 'Signing in...';
            button.disabled = true;
            
            const formData = {
                username: document.getElementById('username').value.trim(),
                password: document.getElementById('password').value,
                deviceInfo: getDeviceInfo()
            };
            
            // Basic validation
            let hasErrors = false;
            
            if (!formData.username) {
                showFieldError('username', 'Username is required');
                hasErrors = true;
            }
            
            if (!formData.password) {
                showFieldError('password', 'Password is required');
                hasErrors = true;
            }
            
            if (hasErrors) {
                button.classList.remove('loading');
                button.textContent = 'Sign In';
                button.disabled = false;
                return;
            }
            
            try {
                const result = await performLogin(formData.username, formData.password, formData.deviceInfo);
                
                if (result.success) {
                    showStatus('Login successful! Redirecting...', 'success');
                    
                    // Redirect to main page
                    setTimeout(() => {
                        window.location.href = '/main';
                    }, 0);
                } else {
                    // Handle specific error cases
                    const response = { status: result.status };
                    const data = result.error;
                    if (response.status === 401) {
                        showFieldError('username', 'Invalid username or password');
                        showFieldError('password', 'Invalid username or password');
                    } else if (response.status === 400) {
                        showStatus(data.message || 'Invalid request data', 'error');
                    } else {
                        showStatus('Login failed. Please try again.', 'error');
                    }
                }
            } catch (error) {
                console.error('Login error:', error);
                showStatus('Network error. Please check your connection.', 'error');
            }
            
            button.classList.remove('loading');
            button.textContent = 'Sign In';
            button.disabled = false;
        });
        
        // Clear errors when user starts typing
        document.querySelectorAll('input, select').forEach(input => {
            input.addEventListener('input', function() {
                hideFieldError(this.id);
            });
        });
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat: Main</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: #f5f5f5;
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: none;
            margin: 0;
            padding: 0;
            height: 100vh;
        }
        
        .chat-container {
            display: flex;
            height: 100%;
            background: white;
            border-radius: 0;
            overflow: hidden;
            box-shadow: none;
        }
        
        .chat-list {
            width: 320px;
            border-right: 1px solid #e9ecef;
            background: #f8f9fa;
            display: flex;
            flex-direction: column;
        }
        
        .chat-list-header {
            padding: 16px 20px;
            border-bottom: 1px solid #e9ecef;
            background: white;
            height: 70px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .current-user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            flex: 1;
        }
        
        .current-user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #666;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 14px;
        }
        
        .current-user-avatar img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .current-user-details {
            flex: 1;
        }
        
        .current-user-name {
            font-size: 1rem;
            font-weight: 600;
            color: #333;
            margin: 0;
            line-height: 1.2;
        }
        
        .current-user-status {
            font-size: 0.85rem;
            color: #666;
            margin: 0;
            line-height: 1.2;
        }
        
        .menu-button {
            width: 32px;
            height: 32px;
            border: none;
            background: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #666;
            font-size: 16px;
            transition: background-color 0.2s ease;
            position: relative;
        }
        
        .menu-button:hover {
            background-color: #f0f0f0;
        }
        
        .menu-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            min-width: 120px;
            z-index: 1000;
            display: none;
        }
        
        .menu-dropdown.show {
            display: block;
        }
        
        .menu-item {
            padding: 12px 16px;
            cursor: pointer;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            font-size: 0.9rem;
            color: #333;
            transition: background-color 0.2s ease;
        }
        
        .menu-item:hover {
            background-color: #f8f9fa;
        }
        
        .menu-item.logout {
            color: #e74c3c;
        }
        
        .menu-item.logout:hover {
            background-color: #fdf2f2;
        }
        
        .chat-items {
            flex: 1;
            overflow-y: auto;
            padding: 0;
        }
        
        .add-chat-button {
            margin: 15px 20px;
            padding: 12px;
            background: #2196f3;
            color: white;
            border: none;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);
        }
        
        .add-chat-button:hover {
            background: #1976d2;
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.4);
        }
        
        .user-selection-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.3);
            display: none;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .user-selection-modal.show {
            opacity: 1;
        }
        
        .user-selection-content {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            max-width: 400px;
            background: white;
            display: flex;
            flex-direction: column;
            box-shadow: 4px 0 20px rgba(0, 0, 0, 0.15);
            transform: translateX(-100%);
            transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }
        
        .user-selection-modal.show .user-selection-content {
            transform: translateX(0);
        }
        
        .user-selection-header {
            padding: 16px 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #fafafa;
            min-height: 60px;
        }
        
        .user-selection-header h3 {
            margin: 0;
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
            text-align: center;
            flex: 1;
        }
        
        .close-modal {
            background: none;
            border: none;
            font-size: 16px;
            cursor: pointer;
            color: #007AFF;
            padding: 8px;
            font-weight: 500;
            border-radius: 6px;
            transition: background-color 0.2s ease;
        }
        
        .close-modal:hover {
            background-color: rgba(0, 122, 255, 0.1);
        }
        
        .user-search-container {
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }
        
        .user-search-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 0.9rem;
            background: #f8f9fa;
        }
        
        .user-search-input:focus {
            outline: none;
            border-color: #2196f3;
            background: white;
        }
        
        .users-list {
            flex: 1;
            overflow-y: auto;
            padding: 0;
            min-height: 200px;
            max-height: 400px;
        }
        
        .user-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        
        .user-item:hover {
            background: #f8f9fa;
        }
        
        .user-item:last-child {
            border-bottom: none;
        }
        
        .user-item-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #666;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 12px;
            flex-shrink: 0;
            font-size: 14px;
        }
        
        .user-item-info {
            flex: 1;
            min-width: 0;
        }
        
        .user-item-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
            font-size: 0.9rem;
        }
        
        .user-item-username {
            color: #666;
            font-size: 0.8rem;
        }
        
        .users-loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 40px;
            color: #666;
        }
        
        .users-empty {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 40px;
            color: #666;
            text-align: center;
        }
        
        .chat-item {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #e9ecef;
            cursor: pointer;
            transition: background-color 0.2s ease;
            background: white;
        }
        
        .chat-item:hover {
            background: #f1f3f4;
        }
        
        .chat-item.active {
            background: #e3f2fd;
            border-right: 3px solid #2196f3;
        }
        
        .chat-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #666;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 15px;
            flex-shrink: 0;
            font-size: 18px;
        }
        
        .chat-avatar img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .chat-info {
            flex: 1;
            min-width: 0;
        }
        
        .chat-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 4px;
            font-size: 0.95rem;
        }
        
        .chat-last-message {
            color: #666;
            font-size: 0.85rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .chat-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
        }
        
        .chat-header {
            padding: 8px 16px;
            border-bottom: 1px solid #e9ecef;
            background: white;
            height: 60px;
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .chat-header-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #666;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            flex-shrink: 0;
            font-size: 16px;
        }
        
        .chat-header-avatar img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .chat-header-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .chat-header h2 {
            font-size: 1.2rem;
            color: #333;
            margin: 0 0 2px 0;
        }
        
        .chat-header p {
            color: #666;
            font-size: 0.9rem;
            margin: 0;
        }
        
        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: #fafafa;
            min-height: 0;
        }
        
        .message {
            display: flex;
            margin-bottom: 2px;
            align-items: flex-start;
        }
        
        .message.own {
            flex-direction: row-reverse;
        }
        
        .message.author-change {
            margin-top: 10px;
        }
        
        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #666;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin: 0 8px;
            flex-shrink: 0;
            font-size: 12px;
        }
        
        .message-avatar img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .personal-chat .message-avatar {
            display: none;
        }
        
        .personal-chat .message-wrapper {
            margin-left: 0;
            margin-right: 0;
        }
        
        .message-wrapper {
            display: flex;
            flex-direction: column;
            max-width: 70%;
            position: relative;
        }
        
        .message.own .message-wrapper {
            align-items: flex-end;
        }
        
        .message-wrapper .message-content-row {
            display: flex;
            align-items: flex-end;
            gap: 0;
        }
        
        .message.own .message-content-row {
            justify-content: flex-end;
        }
        
        .message-author {
            font-weight: 600;
            font-size: 0.8rem;
            margin-bottom: 4px;
            color: #666;
            padding: 0 5px;
        }
        
        .message-content {
            background: linear-gradient(179deg, #ffffff 50%, #efefef 100%);
            border-radius: 16px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: flex-end;
            gap: 4px;
            min-height: 32px;
        }
        
        .message.own .message-content {
            background: linear-gradient(179deg, #2196f3 50%, #1880e5 100%);
            color: white;
        }
        
        /* Message grouping styles with correct corner radius logic - higher specificity */
        /* Regular messages (left side) - top-right, bottom-right always 16px (positions 1,2) */
        .message.group-first .message-content {
            border-radius: 16px 16px 16px 3px !important;
        }
        
        .message.group-middle .message-content {
            border-radius: 3px 16px 16px 3px !important;
        }
        
        .message.group-last .message-content {
            border-radius: 3px 16px 16px 16px !important;
        }
        
        .message.group-single .message-content {
            border-radius: 16px 16px 16px 16px !important;
        }
        
        /* Own messages (right side) - top-left, bottom-left always 16px (positions 0,3) */
        .message.own.group-first .message-content {
            border-radius: 16px 16px 3px 16px !important;
        }
        
        .message.own.group-middle .message-content {
            border-radius: 16px 3px 3px 16px !important;
        }
        
        .message.own.group-last .message-content {
            border-radius: 16px 3px 16px 16px !important;
        }
        
        .message.own.group-single .message-content {
            border-radius: 16px 16px 16px 16px !important;
        }
        
        .message-text {
            font-size: 0.9rem;
            line-height: 1.4;
            margin: 0;
            word-wrap: break-word;
            flex: 1;
            display: flex;
            align-items: center;
            padding: 6px 12px;
            padding-right: 4px;
        }
        
        .message-text a {
            color: inherit;
            text-decoration: underline;
            word-break: break-all;
        }
        
        .message-text a:hover {
            text-decoration: none;
            opacity: 0.8;
        }
        
        .message.own .message-text a {
            color: rgba(255, 255, 255, 0.9);
        }
        
        .message.own .message-text a:hover {
            color: white;
        }
        
        .message-time {
            font-size: 0.7rem;
            color: #999;
            white-space: nowrap;
            flex-shrink: 0;
            align-self: flex-end;
            padding: 4px 10px;
            padding-left: 0px;
        }
        
        .message.own .message-time {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .no-chat-selected {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #666;
            font-size: 1.1rem;
        }
        
        .message-input-container {
            padding: 10px;
            border-top: 1px solid #e9ecef;
            background: white;
            display: flex;
            align-items: flex-end;
            gap: 10px;
        }
        
        .message-input {
            flex: 1;
            border: 1px solid #ddd;
            border-radius: 20px;
            padding: 10px;
            font-size: 1rem;
            resize: none;
            max-height: 100px;
            overflow-y: auto;
            font-family: inherit;
            line-height: 1;
            min-height: 38px;
            height: 38px;
            transition: height 0.1s ease;
            background: #fafafa;
        }
        
        .message-input:focus {
            outline: none;
            background: white;
        }
        
        .send-button {
            width: 38px;
            height: 38px;
            border-radius: 50%;
            background: #2196f3;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            opacity: 0;
            transform: scale(0.8);
            pointer-events: none;
        }
        
        .send-button.visible {
            opacity: 1;
            transform: scale(1);
            pointer-events: auto;
        }
        
        .send-button:hover {
            background: #1976d2;
        }
        
        .message-error {
            color: #e74c3c;
            font-size: 16px;
            margin-right: 8px;
            cursor: pointer;
            align-self: flex-end;
            padding-bottom: 3px;
            flex-shrink: 0;
        }
        
        .message-sending {
            color: #888;
            font-size: 0.75rem;
            margin-right: 4px;
            align-self: flex-end;
            padding-bottom: 7px;
            flex-shrink: 0;
        }
        
        .message.sending {
            opacity: 0.7;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 0;
                height: 100vh;
            }
            
            .chat-container {
                border-radius: 0;
            }
            
            .chat-list {
                width: 100%;
                position: absolute;
                left: 0;
                top: 0;
                height: 100%;
                z-index: 10;
                transition: transform 0.3s ease;
            }
            
            .chat-list.hidden {
                transform: translateX(-100%);
            }
            
            .chat-content {
                width: 100%;
            }
            
            .message-wrapper {
                max-width: 85%;
            }
            
            .chat-avatar {
                width: 40px;
                height: 40px;
                font-size: 16px;
            }
            
            .message-avatar {
                width: 28px;
                height: 28px;
                font-size: 11px;
            }
            
            .user-selection-content {
                width: 100%;
                max-width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="chat-container">
            <div class="chat-list">
                <div class="chat-list-header">
                    <div class="current-user-info">
                        <div class="current-user-avatar" id="currentUserAvatar">?</div>
                        <div class="current-user-details">
                            <div class="current-user-name" id="currentUserName">Loading...</div>
                            <div class="current-user-status">Online</div>
                        </div>
                    </div>
                    <div class="menu-button" onclick="toggleMenu()">
                        ⋯
                        <div class="menu-dropdown" id="menuDropdown">
                            <button class="menu-item logout" onclick="logout()">Logout</button>
                        </div>
                    </div>
                </div>
                <div class="chat-items" id="chatItems">
                    <!-- Chat items will be loaded here -->
                </div>
                <button class="add-chat-button" onclick="openUserSelection()">
                    <span>+</span>
                </button>
            </div>
            
            <div class="chat-content">
                <div class="chat-header" id="chatHeader" style="display: none;">
                    <div class="chat-header-avatar" id="chatHeaderAvatar"></div>
                    <div class="chat-header-info">
                        <h2 id="chatTitle">Select a chat</h2>
                        <p id="chatSubtitle"></p>
                    </div>
                </div>
                
                <div class="messages-container" id="messagesContainer">
                    <div class="no-chat-selected">
                        Select a chat to start messaging
                    </div>
                </div>
                
                <div class="message-input-container" id="messageInputContainer" style="display: none;">
                    <textarea class="message-input" id="messageInput" placeholder="Type a message..." rows="1"></textarea>
                    <button class="send-button" id="sendButton" onclick="sendMessage()">
                        <span>➤</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- User Selection Modal -->
    <div class="user-selection-modal" id="userSelectionModal">
        <div class="user-selection-content">
            <div class="user-selection-header">
                <button class="close-modal" onclick="closeUserSelection()">Cancel</button>
                <h3>Start New Chat</h3>
                <div style="width: 60px;"></div> <!-- Spacer for center alignment -->
            </div>
            <div class="user-search-container">
                <input type="text" class="user-search-input" id="userSearchInput" placeholder="Search users..." autocomplete="off">
            </div>
            <div class="users-list" id="usersList">
                <div class="users-loading">Loading users...</div>
            </div>
        </div>
    </div>
    
    <script>
        // Global variables
        let currentUser = null;
        let currentChatId = null;
        let chats = [];
        let websocket = null;
        let deviceSessionId = null;
        let pendingMessages = new Map(); // Track messages being sent
        
        // User selection variables
        let currentUsers = [];
        let userSearchTimeout = null;
        let lastUserId = null;
        let isLoadingUsers = false;
        let hasMoreUsers = true;
        
        // Get cookie function
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }
        
        // Delete cookie function
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }
        
        // Logout function
        async function logout() {
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            
            if (accessToken) {
                try {
                    // Call logout API
                    await fetch('/users/me/logout', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${accessToken}`
                        }
                    });
                } catch (error) {
                    console.error('Logout API error:', error);
                }
            }
            
            // Clear local storage and cookies
            localStorage.removeItem('accessToken');
            localStorage.removeItem('userInfo');
            deleteCookie('accessToken');
            
            // Redirect to home page
            window.location.href = '/';
        }
        
        // Enhanced authentication check to get current user
        async function checkAuth() {
            console.log('checkAuth called');
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            const userInfo = localStorage.getItem('userInfo');
            
            console.log('Access token:', accessToken ? 'exists' : 'missing');
            console.log('User info:', userInfo ? 'exists' : 'missing');
            
            if (!accessToken) {
                console.log('No access token, redirecting to home');
                window.location.href = '/';
                return;
            }
                return;
            }
            
            // Display user info if available, otherwise fetch from API
            if (userInfo) {
                try {
                    currentUser = JSON.parse(userInfo);
                    console.log('Parsed currentUser from localStorage:', currentUser);
                    
                    try {
                        updateCurrentUserDisplay();
                    } catch (error) {
                        console.error('Error updating current user display:', error);
                    }
                    
                    // Get device session ID for WebSocket
                    deviceSessionId = getDeviceSessionId();
                    
                    // Initialize everything
                    await initializeChat();
                    initializeMessageInput();
                    
                    // Initialize WebSocket if device session ID is available
                    if (deviceSessionId) {
                        initializeWebSocket();
                    } else {
                        console.error('Device sessionId is empty.');
                    }
                } catch (e) {
                    console.error('Error parsing user info:', e);
                    // If parsing fails, fetch from API
                    await fetchCurrentUser();
                }
            } else {
                // If no user info in localStorage, fetch from API
                await fetchCurrentUser();
            }
        }
        
        // Fetch current user info from API
        async function fetchCurrentUser() {
            console.log('fetchCurrentUser called');
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            
            try {
                console.log('Making request to /users/me');
                const response = await fetch('/users/me', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });
                
                console.log('Response status:', response.status);
                
                if (response.ok) {
                    currentUser = await response.json();
                    console.log('Fetched currentUser from API:', currentUser);
                    
                    // Store in localStorage for future use
                    localStorage.setItem('userInfo', JSON.stringify(currentUser));
                    
                    try {
                        updateCurrentUserDisplay();
                    } catch (error) {
                        console.error('Error updating current user display from API:', error);
                    }
                    
                    // Get device session ID for WebSocket
                    deviceSessionId = getDeviceSessionId();
                    
                    // Initialize everything
                    await initializeChat();
                    initializeMessageInput();
                    
                    // Initialize WebSocket if device session ID is available
                    if (deviceSessionId) {
                        initializeWebSocket();
                    } else {
                        console.error('Device sessionId is empty.');
                    }
                } else {
                    console.error('Failed to fetch current user:', response.statusText);
                    // If API call fails, redirect to login
                    window.location.href = '/';
                }
            } catch (error) {
                console.error('Error fetching current user:', error);
                // If API call fails, redirect to login
                window.location.href = '/';
            }
        }
        
        // Check authentication when page loads
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', function() {
                checkAuth().catch(console.error);
            });
        } else {
            checkAuth().catch(console.error);
        }
        
        // Initialize the chat interface
        async function initializeChat() {
            await loadChats();
        }
        
        // Load chats from API
        async function loadChats() {
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            
            try {
                const response = await fetch('/chats/?full=1', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });
                
                if (response.ok) {
                    chats = await response.json();
                    displayChats();
                } else {
                    console.error('Failed to load chats:', response.statusText);
                }
            } catch (error) {
                console.error('Error loading chats:', error);
            }
        }
        
        // Display chats in the sidebar
        function displayChats() {
            const chatItems = document.getElementById('chatItems');
            chatItems.innerHTML = '';
            
            if (chats.length === 0) {
                chatItems.innerHTML = '<div style="padding: 20px; text-align: center; color: #666;">No chats yet</div>';
                return;
            }
            
            chats.forEach(chat => {
                const chatItem = createChatItem(chat);
                chatItems.appendChild(chatItem);
            });
        }
        
        // Create a chat item element
        function createChatItem(chat) {
            const item = document.createElement('div');
            item.className = 'chat-item';
            item.dataset.chatId = chat.id; // Add chat ID as data attribute
            item.onclick = () => selectChat(chat.id);
            
            // Determine chat name and avatar
            let chatName, avatarContent;
            
            if (chat.isPersonal) {
                // For personal chats, show the other user's name
                const otherUser = chat.allUsers.find(user => user.id !== currentUser?.info.id);
                if (!otherUser) {
                    // Chat with oneself
                    chatName = 'Personal Notes';
                    avatarContent = '✏️';
                } else {
                    chatName = otherUser.name;
                    avatarContent = getInitials(otherUser.name);
                }
            } else {
                // For group chats, show chat title
                chatName = chat.title || 'Group Chat';
                avatarContent = '👥'; // Group icon
            }
            
            // Get last message preview
            const lastMessageText = chat.lastMessage ? 
                truncateText(chat.lastMessage.text || '[Media]', 30) : 
                'No messages yet';
            
            item.innerHTML = `
                <div class="chat-avatar">${avatarContent}</div>
                <div class="chat-info">
                    <div class="chat-name">${escapeHtml(chatName)}</div>
                    <div class="chat-last-message">${escapeHtml(lastMessageText)}</div>
                </div>
            `;
            
            return item;
        }
        
        // Select a chat and load its messages
        async function selectChat(chatId) {
            currentChatId = chatId;
            
            // Update active state
            document.querySelectorAll('.chat-item').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
            
            const chat = chats.find(c => c.id === chatId);
            if (!chat) return;
            
            // Update chat header
            const chatHeader = document.getElementById('chatHeader');
            const chatHeaderAvatar = document.getElementById('chatHeaderAvatar');
            const chatTitle = document.getElementById('chatTitle');
            const chatSubtitle = document.getElementById('chatSubtitle');
            const messagesContainer = document.getElementById('messagesContainer');
            
            // Add/remove personal chat class for styling
            if (chat.isPersonal) {
                messagesContainer.classList.add('personal-chat');
                const otherUser = chat.allUsers.find(user => user.id !== currentUser?.info.id);
                if (!otherUser) {
                    // Chat with oneself
                    chatTitle.textContent = 'Personal Notes';
                    chatSubtitle.textContent = 'Notes to yourself';
                    chatHeaderAvatar.textContent = '✏️';
                } else {
                    chatTitle.textContent = otherUser.name;
                    chatSubtitle.textContent = `Personal chat`;
                    chatHeaderAvatar.textContent = getInitials(otherUser.name);
                }
                chatHeaderAvatar.style.display = 'flex';
            } else {
                messagesContainer.classList.remove('personal-chat');
                chatTitle.textContent = chat.title || 'Group Chat';
                chatSubtitle.textContent = `${chat.allUsers.length} members`;
                chatHeaderAvatar.textContent = '👥';
                chatHeaderAvatar.style.display = 'flex';
            }
            
            chatHeader.style.display = 'flex';
            
            // Show message input
            const messageInputContainer = document.getElementById('messageInputContainer');
            messageInputContainer.style.display = 'flex';
            
            // Load messages
            await loadMessages(chatId);
        }
        
        // Load messages for a chat
        async function loadMessages(chatId) {
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            
            try {
                const response = await fetch(`/chats/${chatId}/messages?count=20`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });
                
                if (response.ok) {
                    const messages = await response.json();
                    displayMessages(messages);
                } else {
                    console.error('Failed to load messages:', response.statusText);
                }
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }
        
        // Display messages in the chat area
        function displayMessages(messages) {
            const messagesContainer = document.getElementById('messagesContainer');
            messagesContainer.innerHTML = '';
            
            if (messages.length === 0) {
                messagesContainer.innerHTML = '<div class="no-messages" style="text-align: center; color: #666; padding: 40px;">No messages in this chat</div>';
                return;
            }
            
            // Reverse messages to show oldest first
            messages.reverse();
            
            // Group messages by author and determine position in group
            const messagesWithGrouping = messages.map((message, index) => {
                const prevMessage = index > 0 ? messages[index - 1] : null;
                const nextMessage = index < messages.length - 1 ? messages[index + 1] : null;
                
                const sameAsPrev = prevMessage && prevMessage.authorId === message.authorId;
                const sameAsNext = nextMessage && nextMessage.authorId === message.authorId;
                const isAuthorChange = !sameAsPrev;
                
                let groupPosition;
                if (!sameAsPrev && !sameAsNext) {
                    groupPosition = 'single';
                } else if (!sameAsPrev && sameAsNext) {
                    groupPosition = 'first';
                } else if (sameAsPrev && sameAsNext) {
                    groupPosition = 'middle';
                } else if (sameAsPrev && !sameAsNext) {
                    groupPosition = 'last';
                }
                
                return { ...message, groupPosition, isAuthorChange };
            });
            
            messagesWithGrouping.forEach(message => {
                const messageElement = createMessageElement(message);
                messagesContainer.appendChild(messageElement);
            });
            
            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Create a message element
        function createMessageElement(message) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message';
            
            // Set the author ID and local ID as data attributes
            messageDiv.dataset.authorId = message.authorId || '';
            if (message.localId) {
                messageDiv.dataset.localId = message.localId;
            }
            if (message.id) {
                messageDiv.dataset.messageId = message.id;
            }
            
            const chat = chats.find(c => c.id === currentChatId);
            
            // Check if this is a personal notes chat (chat with oneself)
            const otherUser = chat?.isPersonal ? chat.allUsers.find(user => user.id !== currentUser?.info.id) : null;
            const isPersonalNotesChat = chat?.isPersonal && (!otherUser || otherUser.id === currentUser?.info.id);
            
            const isOwnMessage = currentUser && message.authorId && message.authorId === currentUser.info.id && !isPersonalNotesChat;
            if (isOwnMessage) {
                messageDiv.classList.add('own');
            }
            
            // Add grouping class for corner radius styling
            if (message.groupPosition) {
                messageDiv.classList.add(`group-${message.groupPosition}`);
            }
            
            // Add author-change class for additional spacing
            if (message.isAuthorChange) {
                messageDiv.classList.add('author-change');
            }
            
            // Find author info
            const author = chat?.allUsers.find(user => user.id === message.authorId);
            const authorName = author ? author.name : 'Unknown';
            const authorInitials = author ? getInitials(author.name) : '?';
            
            // Format time
            const messageTime = new Date(message.createdAt).toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            // Check if this is a group chat (show author names only for group chats)
            const isGroupChat = chat && !chat.isPersonal;
            
            messageDiv.innerHTML = `
                <div class="message-avatar">${authorInitials}</div>
                <div class="message-wrapper">
                    ${(isGroupChat && !isOwnMessage) ? `<div class="message-author">${escapeHtml(authorName)}</div>` : ''}
                    <div class="message-content-row">
                        <div class="message-content">
                            <div class="message-text">${convertLinksToClickable(message.text || '[Media]')}</div>
                            <div class="message-time">${messageTime}</div>
                        </div>
                    </div>
                </div>
            `;
            
            return messageDiv;
        }
        
        // Utility functions
        function getInitials(name) {
            if (!name) return '?';
            return name.split(' ').map(word => word[0]).join('').toUpperCase().substring(0, 2);
        }
        
        function truncateText(text, maxLength) {
            if (!text) return '';
            return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        function convertLinksToClickable(text) {
            if (!text) return '';
            
            // First escape HTML to prevent XSS
            const escapedText = escapeHtml(text);
            
            // URL regex pattern that matches http, https, and www links
            const urlRegex = /(https?:\/\/[^\s<>"']+|www\.[^\s<>"']+)/gi;
            
            return escapedText.replace(urlRegex, function(url) {
                let href = url;
                let displayUrl = url;
                
                // Add https:// prefix for www links
                if (url.toLowerCase().startsWith('www.')) {
                    href = 'https://' + url;
                }
                
                // Truncate display URL if it's too long
                if (displayUrl.length > 50) {
                    displayUrl = displayUrl.substring(0, 47) + '...';
                }
                
                return `<a href="${href}" target="_blank" rel="noopener noreferrer" style="color: inherit; text-decoration: underline;">${displayUrl}</a>`;
            });
        }
        
        // Update current user display in chat list header
        function updateCurrentUserDisplay() {
            console.log('updateCurrentUserDisplay called', currentUser);
            
            if (!currentUser || !currentUser.info) {
                console.log('No currentUser or currentUser.info');
                return;
            }
            
            const userName = currentUser.info.name || currentUser.info.username || 'User';
            const userInitials = getInitials(userName);
            
            console.log('Updating display with:', userName, userInitials);
            
            const nameElement = document.getElementById('currentUserName');
            const avatarElement = document.getElementById('currentUserAvatar');
            
            console.log('Elements found:', nameElement, avatarElement);
            
            if (nameElement) nameElement.textContent = userName;
            if (avatarElement) avatarElement.textContent = userInitials;
        }
        
        // Toggle menu dropdown
        function toggleMenu() {
            const dropdown = document.getElementById('menuDropdown');
            dropdown.classList.toggle('show');
        }
        
        // Close menu when clicking outside
        document.addEventListener('click', function(event) {
            const menuButton = event.target.closest('.menu-button');
            const dropdown = document.getElementById('menuDropdown');
            
            if (!menuButton && dropdown) {
                dropdown.classList.remove('show');
            }
        });
        
        // Message input handling
        function initializeMessageInput() {
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            
            function adjustHeight() {
                // Reset to auto to get natural height
                messageInput.style.height = 'auto';
                // Set to scroll height, constrained by CSS max-height
                messageInput.style.height = Math.min(messageInput.scrollHeight, 100) + 'px';
                
                // Show/hide send button
                const hasText = messageInput.value.trim().length > 0;
                sendButton.classList.toggle('visible', hasText);
            }
            
            messageInput.addEventListener('input', adjustHeight);
            
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (this.value.trim()) {
                        sendMessage();
                    }
                }
            });
            
            // Initial adjustment
            adjustHeight();
        }
        
        // Generate local ID for messages
        function generateLocalId() {
            return `${currentUser.info.id}+${crypto.randomUUID()}`;
        }
        
        // Send message
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const text = messageInput.value.trim();
            
            if (!text || !currentChatId || !currentUser || !currentUser.info.id) return;
            
            const localId = generateLocalId();
            
            // Create message object
            const message = {
                localId: localId,
                chatId: currentChatId,
                authorId: currentUser.info.id,
                text: text,
                createdAt: new Date().toISOString(),
                isVisible: true,
                attachments: [],
                readMarks: [],
                isPending: true
            };
            
            // Clear input and hide send button
            messageInput.value = '';
            messageInput.style.height = '38px'; // Reset to initial height
            document.getElementById('sendButton').classList.remove('visible');
            
            // Add message to pending list
            pendingMessages.set(localId, message);
            
            // Display message immediately with sending state
            addMessageToChat(message, true);
            
            // Update chat list with new message
            updateChatListWithMessage(message);
            
            // Send to server using the shared function
            await sendMessageToServer(message);
        }
        
        // Add message to chat with animation
        function addMessageToChat(message, animated = true) {
            const messagesContainer = document.getElementById('messagesContainer');
            
            // Remove "no chat selected" message if present
            const noChat = messagesContainer.querySelector('.no-chat-selected');
            if (noChat) {
                noChat.remove();
            }
            
            // Remove "No messages in this chat" message if present
            const noMessages = messagesContainer.querySelector('.no-messages');
            if (noMessages) {
                noMessages.remove();
            }
            
            // Determine grouping for the new message
            const existingMessages = Array.from(messagesContainer.children);
            const lastMessage = existingMessages[existingMessages.length - 1];
            let isAuthorChange = true;
            let initialGroupPosition = 'single';
            
            if (lastMessage && lastMessage.dataset.authorId) {
                isAuthorChange = lastMessage.dataset.authorId !== message.authorId.toString();
                if (!isAuthorChange) {
                    // Same author as previous message - this will be 'last' and previous should be updated
                    initialGroupPosition = 'last';
                }
            }
            
            // Create message element
            const messageWithGrouping = {
                ...message,
                groupPosition: initialGroupPosition,
                isAuthorChange: isAuthorChange
            };
            
            const messageElement = createMessageElement(messageWithGrouping);
            
            if (message.isPending) {
                messageElement.classList.add('sending');
                addSendingIndicator(messageElement);
            }
            
            if (animated) {
                messageElement.style.opacity = '0';
                messageElement.style.transform = 'translateY(20px)';
                messagesContainer.appendChild(messageElement);
                
                // Trigger animation
                requestAnimationFrame(() => {
                    messageElement.style.transition = 'all 0.3s ease';
                    messageElement.style.opacity = '1';
                    messageElement.style.transform = 'translateY(0)';
                });
            } else {
                messagesContainer.appendChild(messageElement);
            }
            
            // Scroll to bottom
            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, animated ? 300 : 0);
            
            // Update grouping for all messages to ensure consistency
            updateMessageGrouping();
        }
        
        // Update message grouping
        function updateMessageGrouping() {
            const messagesContainer = document.getElementById('messagesContainer');
            const messages = Array.from(messagesContainer.children);
            
            console.log('Updating message grouping for', messages.length, 'messages');
            
            messages.forEach((messageEl, index) => {
                const prevMessage = index > 0 ? messages[index - 1] : null;
                const nextMessage = index < messages.length - 1 ? messages[index + 1] : null;
                
                const currentAuthor = messageEl.dataset.authorId;
                const prevAuthor = prevMessage?.dataset.authorId;
                const nextAuthor = nextMessage?.dataset.authorId;
                
                const sameAsPrev = prevAuthor === currentAuthor;
                const sameAsNext = nextAuthor === currentAuthor;
                
                // Remove existing group classes
                messageEl.classList.remove('group-single', 'group-first', 'group-middle', 'group-last');
                
                let groupPosition;
                if (!sameAsPrev && !sameAsNext) {
                    groupPosition = 'single';
                } else if (!sameAsPrev && sameAsNext) {
                    groupPosition = 'first';
                } else if (sameAsPrev && sameAsNext) {
                    groupPosition = 'middle';
                } else if (sameAsPrev && !sameAsNext) {
                    groupPosition = 'last';
                }
                
                messageEl.classList.add(`group-${groupPosition}`);
                
                console.log(`Message ${index}: author=${currentAuthor}, prev=${prevAuthor}, next=${nextAuthor}, position=${groupPosition}, classes=${messageEl.className}`);
            });
        }
        
        // Update existing message
        function updateMessageInChat(localId, serverMessage) {
            const messageElement = document.querySelector(`[data-local-id="${localId}"]`);
            if (messageElement) {
                messageElement.classList.remove('sending');
                messageElement.dataset.messageId = serverMessage.id;
                
                // Remove sending indicator
                const sendingIndicator = messageElement.querySelector('.message-sending');
                if (sendingIndicator) {
                    sendingIndicator.remove();
                }
            }
        }
        
        // Add sending indicator
        function addSendingIndicator(messageElement) {
            const sendingIndicator = document.createElement('span');
            sendingIndicator.className = 'message-sending';
            sendingIndicator.textContent = 'Sending...';
            
            const messageContentRow = messageElement.querySelector('.message-content-row');
            const messageContent = messageElement.querySelector('.message-content');
            if (messageContentRow && messageContent) {
                // For own messages, insert before the message content to appear on the left
                messageContentRow.insertBefore(sendingIndicator, messageContent);
            }
        }
        
        // Mark message as failed
        function markMessageAsFailed(localId) {
            const messageElement = document.querySelector(`[data-local-id="${localId}"]`);
            if (messageElement) {
                messageElement.classList.remove('sending');
                messageElement.classList.add('error');
                
                // Remove sending indicator
                const sendingIndicator = messageElement.querySelector('.message-sending');
                if (sendingIndicator) {
                    sendingIndicator.remove();
                }
                
                // Add error indicator in front of the message balloon
                const errorIndicator = document.createElement('span');
                errorIndicator.className = 'message-error';
                errorIndicator.innerHTML = '⚠️';
                errorIndicator.title = 'Failed to send. Click to retry.';
                errorIndicator.onclick = () => retryMessage(localId);
                
                const messageContentRow = messageElement.querySelector('.message-content-row');
                const messageContent = messageElement.querySelector('.message-content');
                if (messageContentRow && messageContent) {
                    // For own messages, insert before the message content to appear on the left
                    messageContentRow.insertBefore(errorIndicator, messageContent);
                }
            }
        }
        
        // Retry failed message
        function retryMessage(localId) {
            const message = pendingMessages.get(localId);
            if (message) {
                // Remove error indicator
                const messageElement = document.querySelector(`[data-local-id="${localId}"]`);
                const errorIndicator = messageElement?.querySelector('.message-error');
                if (errorIndicator) {
                    errorIndicator.remove();
                }
                
                messageElement?.classList.remove('error');
                messageElement?.classList.add('sending');
                
                // Add sending indicator back
                if (messageElement) {
                    addSendingIndicator(messageElement);
                }
                
                // Retry sending
                sendMessageToServer(message);
            }
        }
        
        // Send message to server (helper function)
        async function sendMessageToServer(message) {
            try {
                const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
                const response = await fetch(`/chats/${message.chatId}/messages`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        localId: message.localId,
                        text: message.text,
                        isVisible: true
                    })
                });
                
                if (response.ok) {
                    const serverMessage = await response.json();
                    pendingMessages.delete(message.localId);
                    updateMessageInChat(message.localId, serverMessage);
                } else {
                    markMessageAsFailed(message.localId);
                }
            } catch (error) {
                console.error('Error sending message:', error);
                markMessageAsFailed(message.localId);
            }
        }
        
        // WebSocket functionality
        function initializeWebSocket() {
            if (!deviceSessionId) {
                console.warn('No device session ID available for WebSocket');
                return;
            }
            
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            if (!accessToken) {
                console.warn('No access token available for WebSocket');
                return;
            }
            
            const protocol = 'ws:'; // window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/${deviceSessionId}?token=${encodeURIComponent(accessToken)}`;
            
            try {
                websocket = new WebSocket(wsUrl);
                
                websocket.onopen = function() {
                    console.log('WebSocket connected');
                };
                
                websocket.onmessage = function(event) {
                    console.log('WebSocket received:', event.data);
                    
                    // Handle both text and binary (Blob) messages
                    if (event.data instanceof Blob) {
                        // Convert Blob to text
                        const reader = new FileReader();
                        reader.onload = function() {
                            try {
                                console.log('Blob content as text:', reader.result);
                                const notification = JSON.parse(reader.result);
                                handleWebSocketMessage(notification);
                            } catch (error) {
                                console.error('Error parsing Blob message as JSON:', error);
                                console.error('Blob text content:', reader.result);
                                console.error('First 100 characters:', reader.result.substring(0, 100));
                            }
                        };
                        reader.readAsText(event.data);
                    } else {
                        // Handle text messages normally
                        try {
                            const notification = JSON.parse(event.data);
                            handleWebSocketMessage(notification);
                        } catch (error) {
                            console.error('Error parsing WebSocket message:', error);
                            console.error('Raw message data:', event.data);
                            console.error('Message type:', typeof event.data);
                            console.error('First 100 characters:', event.data.substring(0, 100));
                        }
                    }
                };
                
                websocket.onclose = function(event) {
                    console.log('WebSocket disconnected');
                    console.log('Close code:', event.code);
                    console.log('Close reason:', event.reason);
                    console.log('Was clean:', event.wasClean);
                    
                    // Attempt to reconnect after a delay
                    setTimeout(() => {
                        if (deviceSessionId) {
                            initializeWebSocket();
                        }
                    }, 5000);
                };
                
                websocket.onerror = function(error) {
                    console.error('WebSocket error:', error);
                    console.error('WebSocket URL:', wsUrl);
                    console.error('Ready state:', websocket.readyState);
                };
            } catch (error) {
                console.error('Failed to create WebSocket:', error);
            }
        }
        
        // Handle WebSocket messages
        function handleWebSocketMessage(notification) {
            if (notification.event === 'message' && notification.payload) {
                const message = notification.payload;
                
                // Check if this is for the current chat
                if (message.chatId === currentChatId) {
                    // Check if we already have this message (by localId)
                    const existingElement = document.querySelector(`[data-local-id="${message.localId}"]`);
                    
                    if (existingElement) {
                        // Update existing message
                        updateMessageInChat(message.localId, message);
                    } else {
                        // Add new message from others
                        addMessageToChat(message, true);
                    }
                }
                
                // Update chat list with new message
                updateChatListWithMessage(message);
            }
        }
        
        // Update chat list when new message arrives
        function updateChatListWithMessage(message) {
            const chat = chats.find(c => c.id === message.chatId);
            if (chat) {
                chat.lastMessage = message;
                
                // Find the specific chat item in the DOM and update only the last message text
                const chatItem = document.querySelector(`[data-chat-id="${message.chatId}"]`);
                if (chatItem) {
                    const lastMessageElement = chatItem.querySelector('.chat-last-message');
                    if (lastMessageElement) {
                        const lastMessageText = message.text ? 
                            truncateText(message.text, 30) : 
                            '[Media]';
                        lastMessageElement.textContent = lastMessageText;
                    }
                }
            }
        }
        
        // Get device session ID from storage or user info
        function getDeviceSessionId() {
            // Try to get from localStorage first
            const storedSessionId = localStorage.getItem('deviceSessionId');
            if (storedSessionId) {
                return storedSessionId;
            }
            
            // If not available, we might need to extract it from login response
            // For now, return null and handle gracefully
            return null;
        }
        
        // User Selection Functions
        function openUserSelection() {
            const modal = document.getElementById('userSelectionModal');
            modal.style.display = 'block';
            
            // Force a reflow to ensure initial styles are applied
            modal.offsetHeight;
            
            // Trigger animation after display is set
            requestAnimationFrame(() => {
                requestAnimationFrame(() => {
                    modal.classList.add('show');
                });
            });
            
            // Reset state
            currentUsers = [];
            lastUserId = null;
            hasMoreUsers = true;
            isLoadingUsers = false;
            
            // Clear search input
            document.getElementById('userSearchInput').value = '';
            
            // Load initial users
            loadUsers();
            
            // Setup search listener
            setupUserSearch();
            
            // Setup scroll listener for pagination
            setupUserScrollPagination();
        }
        
        function closeUserSelection() {
            const modal = document.getElementById('userSelectionModal');
            modal.classList.remove('show');
            
            // Hide modal after animation completes
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
            
            // Clear timeout if exists
            if (userSearchTimeout) {
                clearTimeout(userSearchTimeout);
                userSearchTimeout = null;
            }
        }
        
        function setupUserSearch() {
            const searchInput = document.getElementById('userSearchInput');
            
            searchInput.addEventListener('input', function() {
                // Clear existing timeout
                if (userSearchTimeout) {
                    clearTimeout(userSearchTimeout);
                }
                
                // Set new timeout for search
                userSearchTimeout = setTimeout(() => {
                    const query = this.value.trim();
                    if (query) {
                        searchUsers(query);
                    } else {
                        // Reset to all users if search is cleared
                        currentUsers = [];
                        lastUserId = null;
                        hasMoreUsers = true;
                        loadUsers();
                    }
                }, 300);
            });
        }
        
        function setupUserScrollPagination() {
            const usersList = document.getElementById('usersList');
            
            usersList.addEventListener('scroll', function() {
                // Check if scrolled to bottom
                if (this.scrollTop + this.clientHeight >= this.scrollHeight - 5) {
                    // Load more users if available and not currently loading
                    if (hasMoreUsers && !isLoadingUsers && !document.getElementById('userSearchInput').value.trim()) {
                        loadUsers();
                    }
                }
            });
        }
        
        async function loadUsers() {
            if (isLoadingUsers || !hasMoreUsers) return;
            
            isLoadingUsers = true;
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            
            try {
                const response = await fetch(`/users/all?id=${lastUserId || 1}&limit=20`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });
                
                if (response.ok) {
                    const users = await response.json();
                    
                    // Add users to current users
                    if (users.length > 0) {
                        currentUsers = [...currentUsers, ...users];
                        // Update lastUserId to the ID of the last user for cursor-based pagination
                        lastUserId = users[users.length - 1].id;
                    }
                    
                    // Set hasMoreUsers to false if we got less than the requested amount (20)
                    if (users.length < 20) {
                        hasMoreUsers = false;
                    }
                    
                    displayUsers();
                } else {
                    console.error('Failed to load users:', response.statusText);
                    showUsersError('Failed to load users');
                }
            } catch (error) {
                console.error('Error loading users:', error);
                showUsersError('Error loading users');
            } finally {
                isLoadingUsers = false;
            }
        }
        
        async function searchUsers(query) {
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            const usersList = document.getElementById('usersList');
            
            // Show loading
            usersList.innerHTML = '<div class="users-loading">Searching users...</div>';
            
            try {
                const response = await fetch(`/users?s=${encodeURIComponent(query)}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });
                
                if (response.ok) {
                    const users = await response.json();
                    
                    currentUsers = users;
                    displayUsers();
                } else {
                    console.error('Failed to search users:', response.statusText);
                    showUsersError('Failed to search users');
                }
            } catch (error) {
                console.error('Error searching users:', error);
                showUsersError('Error searching users');
            }
        }
        
        function displayUsers() {
            const usersList = document.getElementById('usersList');
            
            if (currentUsers.length === 0) {
                usersList.innerHTML = '<div class="users-empty">No users found</div>';
                return;
            }
            
            let html = '';
            currentUsers.forEach(user => {
                const userInitials = getInitials(user.name || user.username || '?');
                html += `
                    <div class="user-item" onclick="selectUser(${user.id})">
                        <div class="user-item-avatar">${userInitials}</div>
                        <div class="user-item-info">
                            <div class="user-item-name">${escapeHtml(user.name || user.username || 'Unknown User')}</div>
                            <div class="user-item-username">@${escapeHtml(user.username || 'unknown')}</div>
                        </div>
                    </div>
                `;
            });
            
            // Add loading indicator if there are more users to load
            if (hasMoreUsers && !document.getElementById('userSearchInput').value.trim()) {
                html += '<div class="users-loading" style="padding: 20px;">Loading more users...</div>';
            }
            
            usersList.innerHTML = html;
        }
        
        function showUsersError(message) {
            const usersList = document.getElementById('usersList');
            usersList.innerHTML = `<div class="users-empty">${message}</div>`;
        }
        
        async function selectUser(userId) {
            // Close modal
            closeUserSelection();
            
            // Create or find chat with this user
            await createOrOpenPersonalChat(userId);
        }
        
        async function createOrOpenPersonalChat(userId) {
            const accessToken = getCookie('accessToken') || localStorage.getItem('accessToken');
            
            try {
                // First, check if we already have a personal chat with this user
                const existingChat = chats.find(chat => 
                    chat.isPersonal && 
                    chat.allUsers.some(user => user.id === userId)
                );
                
                if (existingChat) {
                    // Open existing chat
                    selectChat(existingChat.id);
                    return;
                }
                
                // Create new personal chat
                const response = await fetch('/chats', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        isPersonal: true,
                        participants: [userId]
                    })
                });
                
                if (response.ok) {
                    const newChat = await response.json();
                    
                    // Add to chats list
                    chats.unshift(newChat);
                    
                    // Refresh chat display
                    displayChats();
                    
                    // Select the new chat
                    selectChat(newChat.id);
                } else {
                    console.error('Failed to create chat:', response.statusText);
                    alert('Failed to create chat. Please try again.');
                }
            } catch (error) {
                console.error('Error creating chat:', error);
                alert('Error creating chat. Please try again.');
            }
        }
        
        // Close modal when clicking outside
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('userSelectionModal');
            if (event.target === modal) {
                closeUserSelection();
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeUserSelection();
            }
        });
        
        // Add plus button click handler when page loads
        document.addEventListener('DOMContentLoaded', function() {
            const addChatButton = document.getElementById('addChatButton');
            if (addChatButton) {
                addChatButton.addEventListener('click', openUserSelection);
            }
        });
    </script>
</body>
</html>
